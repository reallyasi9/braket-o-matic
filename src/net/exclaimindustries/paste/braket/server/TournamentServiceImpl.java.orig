/**
 * This file is part of braket-o-matic.
 *
 * braket-o-matic is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * braket-o-matic is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with braket-o-matic.  If not, see <http://www.gnu.org/licenses/>.
 */
package net.exclaimindustries.paste.braket.server;

import java.util.Collection;
import java.util.HashSet;

import net.exclaimindustries.paste.braket.client.BraketGame;
import net.exclaimindustries.paste.braket.client.BraketTeam;
import net.exclaimindustries.paste.braket.client.BraketTournament;
import net.exclaimindustries.paste.braket.client.TournamentService;

import com.google.appengine.api.users.UserServiceFactory;
import com.google.gwt.user.server.rpc.RemoteServiceServlet;
import com.googlecode.objectify.Key;
import com.googlecode.objectify.Ref;
import com.googlecode.objectify.VoidWork;
import com.googlecode.objectify.Work;

/**
 * @author paste
 * 
 */
public class TournamentServiceImpl extends RemoteServiceServlet implements
        TournamentService {

    /**
     * Generated
     */
    private static final long serialVersionUID = 1L;

    /*
     * (non-Javadoc)
     * 
     * @see net.exclaimindustries.paste.braket.client.TournamentService#
     * getCurrentTournament()
     */
    @Override
    public BraketTournament getCurrentTournament() {
        Ref<BraketTournament> tournament =
                CurrentTournament.getCurrentTournament();
        if (tournament == null) {
            return null;
        }
        return tournament.get();
    }

    /*
     * (non-Javadoc)
     * 
     * @see
     * net.exclaimindustries.paste.braket.client.TournamentService#getTournaments
     * ()
     */
    @Override
    public Collection<BraketTournament> getTournaments() {
        if (!UserServiceFactory.getUserService().isUserAdmin()) {
            throw new SecurityException("administration privileges required");
        }

        return new HashSet<BraketTournament>(OfyService.ofy().load()
                .type(BraketTournament.class).list());
    }

    /*
     * (non-Javadoc)
     * 
     * @see
     * net.exclaimindustries.paste.braket.client.TournamentService#storeTournaments
     * (java.util.Collection)
     */
    @Override
    public void storeTournaments(Iterable<BraketTournament> tournaments) {
        if (!UserServiceFactory.getUserService().isUserAdmin()) {
            throw new SecurityException("administration privileges required");
        }
        OfyService.ofy().save().entities(tournaments);
    }

    /*
     * (non-Javadoc)
     * 
     * @see
     * net.exclaimindustries.paste.braket.client.TournamentService#storeTournament
     * (net.exclaimindustries.paste.braket.client.BraketTournament)
     */
    @Override
    public Long storeTournament(BraketTournament tournament) {
        if (!UserServiceFactory.getUserService().isUserAdmin()) {
            throw new SecurityException("administration privileges required");
        }
        return OfyService.ofy().save().entity(tournament).now().getId();
    }

    /*
     * (non-Javadoc)
     * 
     * @see
     * net.exclaimindustries.paste.braket.client.TournamentService#deleteTournaments
     * (java.util.Collection)
     */
    @Override
    public void deleteTournaments(Iterable<BraketTournament> tournaments) {
        if (!UserServiceFactory.getUserService().isUserAdmin()) {
            throw new SecurityException("administration privileges required");
        }
        OfyService.ofy().delete().entities(tournaments);
    }

    /*
     * (non-Javadoc)
     * 
     * @see
     * net.exclaimindustries.paste.braket.client.TournamentService#deleteTournament
     * (net.exclaimindustries.paste.braket.client.BraketTournament)
     */
    @Override
    public void deleteTournament(BraketTournament tournament) {
        if (!UserServiceFactory.getUserService().isUserAdmin()) {
            throw new SecurityException("administration privileges required");
        }
        OfyService.ofy().delete().entity(tournament);
    }

    /*
     * (non-Javadoc)
     * 
     * @see net.exclaimindustries.paste.braket.client.TournamentService#
     * setCurrentTournament
     * (net.exclaimindustries.paste.braket.client.BraketTournament)
     */
    @Override
    public void setCurrentTournament(BraketTournament tournament) {
        if (!UserServiceFactory.getUserService().isUserAdmin()) {
            throw new SecurityException("administration privileges required");
        }

        Key<CurrentTournament> key = Key.create(CurrentTournament.class, 1);
        CurrentTournament current = OfyService.ofy().load().key(key).get();
        if (current == null) {
            current = new CurrentTournament();
        }
        current.setTournament(tournament);
        OfyService.ofy().save().entity(current);
    }

    /*
     * (non-Javadoc)
     * 
     * @see
     * net.exclaimindustries.paste.braket.client.TournamentService#addTeam(net
     * .exclaimindustries.paste.braket.client.BraketTeam)
     */
    @Override
    public Long addTeam(final BraketTeam team) {
        if (!UserServiceFactory.getUserService().isUserAdmin()) {
            throw new SecurityException("administration privileges required");
        }

        if (team.getIndex() < 0) {
            throw new IllegalArgumentException(
                    "team index must be greater than or equal to zero");
        }

        final Ref<BraketTournament> currentRef =
                CurrentTournament.getCurrentTournament();
        if (currentRef == null) {
            throw new NullPointerException("current tournament is not set");
        }

        return OfyService.ofy().transact(new Work<Long>() {

            @Override
            public Long run() {

                team.setTournamentKey(currentRef.getKey());
                Long id = OfyService.ofy().save().entity(team).now().getId();

                BraketTournament tournament = currentRef.get();
                tournament.setTeam(team.getIndex(), id);
                OfyService.ofy().save().entity(tournament);

                return id;
            }

        });

    }

    /*
     * (non-Javadoc)
     * 
     * @see
     * net.exclaimindustries.paste.braket.client.TournamentService#addTeam(net
     * .exclaimindustries.paste.braket.client.BraketTeam,
     * net.exclaimindustries.paste.braket.client.BraketTournament)
     */
    @Override
    public Long
            addTeam(final BraketTeam team, final BraketTournament tournament) {
        if (!UserServiceFactory.getUserService().isUserAdmin()) {
            throw new SecurityException("administration privileges required");
        }

        if (team.getIndex() < 0) {
            throw new IllegalArgumentException(
                    "team index must be greater than or equal to zero");
        }

        return OfyService.ofy().transact(new Work<Long>() {

            @Override
            public Long run() {

                team.setTournamentKey(Key.create(BraketTournament.class,
                        tournament.getId()));
                Long id = OfyService.ofy().save().entity(team).now().getId();

                tournament.setTeam(team.getIndex(), id);
                OfyService.ofy().save().entity(tournament);

                return id;

            }

        });
    }

    /*
     * (non-Javadoc)
     * 
     * @see
     * net.exclaimindustries.paste.braket.client.TournamentService#addTeams(
     * java.lang.Iterable)
     */
    @Override
    public void addTeams(final Iterable<BraketTeam> teams) {
        if (!UserServiceFactory.getUserService().isUserAdmin()) {
            throw new SecurityException("administration privileges required");
        }

        final Ref<BraketTournament> currentRef =
                CurrentTournament.getCurrentTournament();
        if (currentRef == null) {
            throw new NullPointerException("current tournament is not set");
        }

        for (BraketTeam team : teams) {
            if (team.getIndex() < 0) {
                throw new IllegalArgumentException(
                        "team index must be greater than or equal to zero");
            }
            team.setTournamentKey(currentRef.getKey());
        }

        OfyService.ofy().transact(new VoidWork() {

            @Override
            public void vrun() {

                BraketTournament tournament = currentRef.get();

                OfyService.ofy().save().entities(teams).now();

                for (BraketTeam team : teams) {
                    tournament.setTeam(team.getIndex(), team.getId());
                }
                OfyService.ofy().save().entity(tournament);

            }

        });
    }

    /*
     * (non-Javadoc)
     * 
     * @see
     * net.exclaimindustries.paste.braket.client.TournamentService#addTeams(
     * java.lang.Iterable,
     * net.exclaimindustries.paste.braket.client.BraketTournament)
     */
    @Override
    public void addTeams(final Iterable<BraketTeam> teams,
            final BraketTournament tournament) {

        if (!UserServiceFactory.getUserService().isUserAdmin()) {
            throw new SecurityException("administration privileges required");
        }

        for (BraketTeam team : teams) {
            if (team.getIndex() < 0) {
                throw new IllegalArgumentException(
                        "team index must be greater than or equal to zero");
            }
            team.setTournamentKey(Key.create(BraketTournament.class,
                    tournament.getId()));
        }

        OfyService.ofy().transact(new VoidWork() {

            @Override
            public void vrun() {

                OfyService.ofy().save().entities(teams).now();

                for (BraketTeam team : teams) {
                    tournament.setTeam(team.getIndex(), team.getId());
                }
                OfyService.ofy().save().entity(tournament);
            }

        });

    }

    /*
     * (non-Javadoc)
     * 
     * @see
     * net.exclaimindustries.paste.braket.client.TournamentService#addGame(net
     * .exclaimindustries.paste.braket.client.BraketGame)
     */
    @Override
    public Long addGame(final BraketGame game) {
        if (!UserServiceFactory.getUserService().isUserAdmin()) {
            throw new SecurityException("administration privileges required");
        }

        if (game.getIndex() < 0) {
            throw new IllegalArgumentException(
                    "game number must be greater than or equal to zero");
        }

        final Ref<BraketTournament> currentRef =
                CurrentTournament.getCurrentTournament();
        if (currentRef == null) {
            throw new NullPointerException("current tournament is not set");
        }

        return OfyService.ofy().transact(new Work<Long>() {

            @Override
            public Long run() {

                game.setTournamentKey(currentRef.getKey());
                Long id = OfyService.ofy().save().entity(game).now().getId();

                BraketTournament tournament = currentRef.get();
                tournament.setGame(game.getIndex(), id);
                OfyService.ofy().save().entity(tournament);

                return id;
            }

        });
    }

    /*
     * (non-Javadoc)
     * 
     * @see
     * net.exclaimindustries.paste.braket.client.TournamentService#addGame(net
     * .exclaimindustries.paste.braket.client.BraketGame,
     * net.exclaimindustries.paste.braket.client.BraketTournament)
     */
    @Override
    public Long
            addGame(final BraketGame game, final BraketTournament tournament) {
        if (!UserServiceFactory.getUserService().isUserAdmin()) {
            throw new SecurityException("administration privileges required");
        }

        if (game.getIndex() < 0) {
            throw new IllegalArgumentException(
                    "game number must be greater than or equal to zero");
        }

        return OfyService.ofy().transact(new Work<Long>() {

            @Override
            public Long run() {

                game.setTournamentKey(Key.create(BraketTournament.class,
                        tournament.getId()));
                Long id = OfyService.ofy().save().entity(game).now().getId();

                tournament.setGame(game.getIndex(), id);
                OfyService.ofy().save().entity(tournament);

                return id;
            }

        });
    }

    /*
     * (non-Javadoc)
     * 
     * @see
     * net.exclaimindustries.paste.braket.client.TournamentService#addGames(
     * java.lang.Iterable)
     */
    @Override
    public void addGames(final Iterable<BraketGame> games) {

        if (!UserServiceFactory.getUserService().isUserAdmin()) {
            throw new SecurityException("administration privileges required");
        }

        final Ref<BraketTournament> currentRef =
                CurrentTournament.getCurrentTournament();
        if (currentRef == null) {
            throw new NullPointerException("current tournament is not set");
        }

        for (BraketGame game : games) {
            if (game.getIndex() < 0) {
                throw new IllegalArgumentException(
                        "game number must be greater than or equal to zero");
            }
            game.setTournamentKey(currentRef.getKey());
        }

        OfyService.ofy().transact(new VoidWork() {

            @Override
            public void vrun() {

                OfyService.ofy().save().entities(games).now();

                BraketTournament tournament = currentRef.get();

                for (BraketGame game : games) {
                    tournament.setGame(game.getIndex(), game.getId());
                }
                OfyService.ofy().save().entity(tournament);

            }

        });
    }

    /*
     * (non-Javadoc)
     * 
     * @see
     * net.exclaimindustries.paste.braket.client.TournamentService#addGames(
     * java.lang.Iterable,
     * net.exclaimindustries.paste.braket.client.BraketTournament)
     */
    @Override
    public void addGames(final Iterable<BraketGame> games,
            final BraketTournament tournament) {
        if (!UserServiceFactory.getUserService().isUserAdmin()) {
            throw new SecurityException("administration privileges required");
        }

        for (BraketGame game : games) {
            if (game.getIndex() < 0) {
                throw new IllegalArgumentException(
                        "game number must be greater than or equal to zero");
            }
            game.setTournamentKey(Key.create(BraketTournament.class,
                    tournament.getId()));
        }

        OfyService.ofy().transact(new VoidWork() {

            @Override
            public void vrun() {

                OfyService.ofy().save().entities(games).now();

                for (BraketGame game : games) {
                    tournament.setTeam(game.getIndex(), game.getId());
                }
                OfyService.ofy().save().entity(tournament);

            }

        });
    }

}
